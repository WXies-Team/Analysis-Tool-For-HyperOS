name: Build

on:
  push:
    tags:
      - 'v*'

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get-version
        run: |
          VERSION=${GITHUB_REF/refs\/tags\//}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Generate release.md
        run: |
          latest_tag=$(git describe --tags --abbrev=0)
          if git rev-list $latest_tag..HEAD | grep -q .; then
            git log --pretty=format:"%B" $latest_tag..HEAD | awk 'NF {print "- " $0} !NF {print ""}' > release.md
          else
            echo "No changes since last tag" > release.md
          fi
          echo "Generated release notes:"
          cat release.md

      - name: Upload release notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release.md

  build:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [
          { os: Windows, arch: x86_64, dep_os: windows, erofs_suffix: Cygwin_x86_64, extra_files: cygwin1.dll },
          { os: Linux, arch: x86_64, dep_os: linux, erofs_suffix: Linux_x86_64 },
          { os: Linux, arch: arm64, dep_os: linux, erofs_suffix: Linux_aarch64 },
          { os: Darwin, arch: x86_64, dep_os: darwin, erofs_suffix: Darwin_x86_64 },
          { os: Darwin, arch: arm64, dep_os: darwin, erofs_suffix: Darwin_aarch64 },
          { os: Android, arch: arm64, dep_os: linux, erofs_suffix: Android_arm64 },
          { os: Android, arch: x86_64, dep_os: linux, erofs_suffix: Android_x86_64 },
          { os: WSL, arch: x86_64, dep_os: linux, erofs_suffix: WSL_x86_64 }
        ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Prepare directory
        run: |
          dir_name="Analysis-Tool-For-HyperOS-${{ matrix.platform.os }}-${{ matrix.platform.arch }}"
          mkdir -p "./$dir_name/tools"
          cp -r ./* "./$dir_name/" || true

      - name: Download dependencies
        uses: robinraju/release-downloader@v1.10
        with:
          repository: "ssut/payload-dumper-go"
          latest: true
          fileName: "payload-dumper-go_*_${{ matrix.platform.dep_os }}_${{ matrix.platform.arch }}.tar.gz"
      
      - name: Download erofs-utils
        uses: robinraju/release-downloader@v1.10
        with:
          repository: "sekaiacg/erofs-utils"
          latest: true
          fileName: "erofs-utils-*-${{ matrix.platform.erofs_suffix }}-*.zip"

      - name: Process dependencies
        run: |
          dir_name="Analysis-Tool-For-HyperOS-${{ matrix.platform.os }}-${{ matrix.platform.arch }}"
          
          for file in *; do
            case "$file" in
              *.zip)
                unzip -j "$file" "extract.erofs*" -d "./$dir_name/tools"
                [ -n "${{ matrix.platform.extra_files }}" ] && unzip -j "$file" "${{ matrix.platform.extra_files }}" -d "./$dir_name/tools"
                ;;
              *.tar.gz)
                tar -xzv -C "./$dir_name/tools" -f "$file" --wildcards "payload-dumper-go*"
                ;;
            esac
          done

      - name: Package artifacts
        run: |
          dir_name="Analysis-Tool-For-HyperOS-${{ matrix.platform.os }}-${{ matrix.platform.arch }}"
          7z a "./$dir_name.zip" "./$dir_name/*"
          mkdir -p output
          mv "$dir_name.zip" "output/Analysis-Tool-For-HyperOS-${{ needs.prepare.outputs.version }}-${{ matrix.platform.os }}-${{ matrix.platform.arch }}.zip"
          rm ./*.zip ./*.tar.gz

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: Analysis-Tool-For-HyperOS-${{ needs.prepare.outputs.version }}-${{ matrix.platform.os }}-${{ matrix.platform.arch }}.zip
          path: ./output/*

  release:
    needs: [prepare, build]
    runs-on: ubuntu-latest
    steps:
      - name: Download release notes
        uses: actions/download-artifact@v4
        with:
          name: release-notes
          path: ./

      - name: Create GitHub Release
        if: ${{ !contains(github.ref, 'beta') }}
        uses: softprops/action-gh-release@v2
        with:
          body_path: './release.md'
          files: |
            output/Analysis-Tool-For-HyperOS-${{ needs.prepare.outputs.version }}*.zip
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload to WebDAV
        if: ${{ !contains(github.ref, 'beta') }}
        run: |
          VERSION=${{ needs.prepare.outputs.version }}
          FOLDER="${{ secrets.DRIVE_CENTER_ADDR_WEBDAV }}/Analysis-Tool-For-HyperOS/$VERSION"
          curl -u "${{ secrets.DRIVE_CENTER_RELEASE_USER }}:${{ secrets.DRIVE_CENTER_RELEASE_TOKEN }}" -X MKCOL "$FOLDER/" || true
          for file in ./output/*; do
            curl -T "$file" -u "${{ secrets.DRIVE_CENTER_RELEASE_USER }}:${{ secrets.DRIVE_CENTER_RELEASE_TOKEN }}" "$FOLDER/$(basename "$file")"
          done
